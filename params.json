{
  "name": "Enjoin ORM",
  "tagline": "Multi dialect ORM for PHP inspired by Sequelize.JS",
  "body": "Enjoin ORM\r\n==========\r\n\r\n[![Build Status](https://travis-ci.org/mightydes/enjoin.svg?branch=master)](https://travis-ci.org/mightydes/enjoin)\r\n\r\n# Getting Started\r\n\r\n## Introduction\r\n\r\nEnjoin is an active-record ORM for PHP.\r\nEnjoin built on [Laravel Components](https://github.com/illuminate) and inspired by [Sequelize](https://github.com/sequelize/sequelize) for Node.js.\r\nIt supports MySQL and PostgreSQL dialects.\r\nUnlike Eloquent, Enjoin features eager loading, built-in validation and more.\r\n\r\n## Installation\r\n\r\nEnjoin is available via Composer:\r\n\r\n```sh\r\n$ composer require mightydes/enjoin\r\n```\r\n\r\nIf you need language locales, then require [laravel-lang](https://github.com/caouecs/laravel-lang) package:\r\n```sh\r\n$ composer require caouecs/laravel-lang\r\n```\r\n\r\nThen add `Models` autoload entry to your `composer.json` file:\r\n\r\n```json\r\n  \"autoload\": {\r\n    \"psr-4\": {\r\n      \"Models\\\\\": [\r\n        \"app/Models\"\r\n      ]\r\n    }\r\n  }\r\n```\r\n\r\n## Stand-alone bootstrap\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once __DIR__ . '/vendor/autoload.php';\r\n\r\nuse Enjoin\\Factory;\r\n\r\nFactory::bootstrap([\r\n    'database' => [\r\n        'default' => 'acme',\r\n        'connections' => [\r\n            'acme' => [\r\n                'driver' => 'mysql',\r\n                'host' => 'localhost',\r\n                'database' => 'acme',\r\n                'username' => 'acme',\r\n                'password' => 'acme',\r\n                'charset' => 'utf8',\r\n                'collation' => 'utf8_unicode_ci',\r\n                'prefix' => ''\r\n            ]\r\n        ],\r\n        'redis' => [\r\n            'cluster' => false,\r\n            'default' => [\r\n                'host' => '127.0.0.1',\r\n                'port' => 6379,\r\n                'database' => 0,\r\n            ]\r\n        ]\r\n    ],\r\n    'enjoin' => [\r\n        'lang_dir' => 'vendor/caouecs/laravel-lang'\r\n    ],\r\n    'cache' => [\r\n        'default' => 'redis',\r\n        'stores' => [\r\n            'redis' => [\r\n                'driver' => 'redis',\r\n                'connection' => 'default'\r\n            ]\r\n        ],\r\n        'prefix' => 'enjoin_'\r\n    ]\r\n]);\r\n```\r\n\r\n## Laravel bootstrap\r\n\r\nFirst add `Enjoin\\EnjoinServiceProvider` to `providers` list,\r\nand `'Enjoin' => 'Enjoin\\EnjoinFacade'` to `aliases` list in `config/app.php`.\r\n\r\nThen register config in `app/Providers/ConfigServiceProvider.php`:\r\n\r\n```php\r\n<?php namespace App\\Providers;\r\n\r\nuse Illuminate\\Support\\ServiceProvider;\r\n\r\nclass ConfigServiceProvider extends ServiceProvider\r\n{\r\n\r\n    public function register()\r\n    {\r\n        config([\r\n            'enjoin' => [\r\n                'lang_dir' => 'vendor/caouecs/laravel-lang'\r\n            ]\r\n        ]);\r\n    }\r\n\r\n}\r\n```\r\n\r\n## Model Definition\r\n\r\nYou need to define mapping between tables and models.\r\nFor example, table `books` with columns:\r\n\r\n* id (int, primary, auto-increment)\r\n* authors_id (int, foreign-key)\r\n* title (varchar)\r\n* year (int)\r\n\r\nHas definition:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public function getAttributes()\r\n    {\r\n        return [\r\n            'id' => ['type' => Enjoin::Integer()],\r\n            'authors_id' => ['type' => Enjoin::Integer()],\r\n            'title' => ['type' => Enjoin::String()],\r\n            'year' => ['type' => Enjoin::Integer(), 'validate' => 'integer|max:2020']\r\n        ];\r\n    }\r\n\r\n    public function getRelations()\r\n    {\r\n        return [\r\n            Enjoin::belongsTo(Enjoin::get('Authors'), ['foreignKey' => 'authors_id'])\r\n        ];\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Definition.connection\r\n\r\nConnection to use. Equals to `default` connection by default.\r\nExample:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public $connection = 'acme';\r\n\r\n}\r\n```\r\n\r\n### Definition.table\r\n\r\nTable name. Equals to `Inflector::tableize(<ModelClassName>)` by default.\r\nExample:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public $table = 'books';\r\n\r\n}\r\n```\r\n\r\n### Definition.timestamps\r\n\r\nEnables or disables timestamps (ie `created_at`, `updated_at`). Equals to `true` by default.\r\nExample:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public $timestamps = false;\r\n\r\n}\r\n```\r\n\r\n### Definition.createdAt\r\n\r\nCreatedAt column name. Equals to `created_at` by default.\r\nExample:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public $createdAt = 'createdAt';\r\n\r\n}\r\n```\r\n\r\n### Definition.updatedAt\r\n\r\nUpdatedAt column name. Equals to `updated_at` by default.\r\nExample:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public $updatedAt = 'updatedAt';\r\n\r\n}\r\n```\r\n\r\n### Definition.cache\r\n\r\nEnables or disables cache. Equals to `false` by default.\r\nExample:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public $cache = true;\r\n\r\n}\r\n```\r\n\r\n### Definition.expanseModel\r\n\r\nClass name to extend generic model class.\r\nIt is useful, if you want to define custom model methods.\r\nExample:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public $expanseModel = Expanse\\BooksModel::class;\r\n\r\n}\r\n```\r\n\r\n### Definition.expanseRecord\r\n\r\nClass name to extend generic record class.\r\nIt is useful, if you want to define custom record methods.\r\nExample:\r\n\r\n```php\r\n<?php namespace Models;\r\n\r\nuse Enjoin\\Model\\Definition;\r\nuse Enjoin\\Enjoin;\r\n\r\nclass Books extends Definition\r\n{\r\n\r\n    public $expanseRecord = Expanse\\BooksRecord::class;\r\n\r\n}\r\n```\r\n\r\n### Definition.getAttributes()\r\n\r\nReturns associative array, where each key is a table column.\r\n\r\n### Definition.getAttributes().type\r\n\r\n* Enjoin::Integer()\r\n* Enjoin::Boolean()\r\n* Enjoin::String()\r\n* Enjoin::Text()\r\n* Enjoin::Float()\r\n* Enjoin::Date()\r\n* Enjoin::Enum()\r\n\r\n### Definition.getAttributes().allowNull\r\n\r\nIndicates is `NULL` allowed on field.\r\nBy default is `true`.\r\n\r\n### Definition.getAttributes().validate\r\n\r\nValidation rules for field.\r\nYou can read more about validation [here](https://laravel.com/docs/5.2/validation).\r\n\r\n### Definition.getAttributes().get\r\n\r\nYou can define custom getter closure for field:\r\n\r\n```php\r\n    'fullname' => [\r\n        'type' => Enjoin::String(),\r\n        'get' => function ($attr, Closure $getValue) {\r\n            $v = $getValue($attr);\r\n            if (is_string($v) && strlen($v) > 0) {\r\n                $r = explode(' ', $v);\r\n                return [\r\n                    'name' => $r[0],\r\n                    'surname' => $r[1]\r\n                ];\r\n            }\r\n            return null;\r\n        }\r\n    ]\r\n```\r\n\r\n### Definition.getAttributes().set\r\n\r\nYou can define custom setter closure for field:\r\n\r\n```php\r\n    'fullname' => [\r\n        'type' => Enjoin::String(),\r\n        'set' => function ($attr, Closure $getValue) {\r\n            $v = $getValue($attr);\r\n            if (is_array($v)) {\r\n                return join(' ', $v);\r\n            }\r\n            return $v;\r\n        }\r\n    ]\r\n```\r\n\r\n### Definition.getRelations()\r\n\r\nReturns array, where each value is a relation.\r\nSupported relations:\r\n\r\n* `belongsTo`\r\n* `hasMany`\r\n* `hasOne`\r\n\r\nExample:\r\n\r\n```php\r\n    public function getRelations()\r\n    {\r\n        return [\r\n            Enjoin::belongsTo(Enjoin::get('Authors')),\r\n            Enjoin::belongsTo(Enjoin::get('Languages')),\r\n            Enjoin::hasMany(Enjoin::get('Reviews')),\r\n            Enjoin::hasMany(Enjoin::get('PublishersBooks'))\r\n        ];\r\n    }\r\n```\r\n\r\n### Definition.getRelations().foreignKey\r\n\r\nForeign key column name.\r\nExample:\r\n\r\n```php\r\n    public function getRelations()\r\n    {\r\n        return [\r\n            Enjoin::belongsTo(Enjoin::get('Authors'), ['foreignKey' => 'authors_id'])\r\n        ];\r\n    }\r\n```\r\n\r\n### Definition.getRelations().as\r\n\r\nForeign key column `as` alias.\r\nExample:\r\n\r\n```php\r\n    public function getRelations()\r\n    {\r\n        return [\r\n            Enjoin::belongsTo(Enjoin::get('Authors'), ['as' => 'person'])\r\n        ];\r\n    }\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}